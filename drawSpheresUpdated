 GameObject sphereThmb;
    float vals;
    public static  Process process;
    public GameObject txt;
    public GameObject realCoords;
    public GameObject player;
    public GameObject tracker;
    public bool turnOn = false;
    
    private float timer = 0.0f;
    private float optoRefreshRate = 1.0f;
    
    public float currX;
    public float currY;
    public float currZ;
    
    public string[] coords;

    
    
   // bool active = false;


    // Start is called before the first frame update
    void Start()
    {
        sphereInd = GameObject.CreatePrimitive(PrimitiveType.Sphere);
       // runCommand();
    }

    // Update is called once per frame
    void Update()
    {
        //vals = Random.Range(0, 10.0f);
      //  print(vals);
        sphereInd.transform.position = new Vector3(vals, vals, vals);
        //sphereThmb.transform.position = new Vector3(vals, vals, vals);
        
        
        float playerX;
        float playerY;
        float playerZ;
        
         timer += Time.deltaTime;
         
        if (Input.GetKey("up"))
        {
            print("5");
            StreamReader reader;
            string output;
            StreamWriter sr= process.StandardInput;
            print("THIS SHOULD WORK");
            //sr.WriteLine("0");
            
            //sr.WriteLine(" ");
            reader = process.StandardOutput;
            output = reader.ReadLine();
            //print(output);
            process.WaitForExit();
            //sr.Close();

        }
        
        if (Input.GetKey("5"))
        {
            print("5");
            StreamReader reader;
            string output;
            StreamWriter sr= process.StandardInput;
            print("THIS SHOULD WORK");
            sr.WriteLine("5");
            
            sr.WriteLine(" ");
            reader = process.StandardOutput;
            output = reader.ReadLine();
            print(output);
            //sr.Close();

        }
        
        if (Input.GetKey("6") && turnOn == false)
        {
            StreamReader reader;
            string output;
            StreamWriter sr= process.StandardInput;
            //print("THIS SHOULD WORK");
            sr.WriteLine("6");
            
            sr.WriteLine(" ");
            reader = process.StandardOutput;
            output = reader.ReadLine();
            //sr.Close();
           // coords  = output.Split(' ');
            string test = "Hello  World  Dos";
            char[] spaces = {' '};
            
            string[] testArray = output.Split(spaces, System.StringSplitOptions.RemoveEmptyEntries);
            
            List<string> list = new List<string>(testArray);

            txt.GetComponent<UnityEngine.UI.Text>().text = list[0] + "  " + list[1] + "  " + list[2];
            realCoords.GetComponent<UnityEngine.UI.Text>().text = output;
            
            currX = (tracker.transform.position.x + (float.Parse(generateCoord(list[0])) / 1000));
            currY = (tracker.transform.position.y + (float.Parse(generateCoord(list[1])) / 1000));
            currZ = (tracker.transform.position.z + -(float.Parse(generateCoord(list[2])) / 1000));
            
            hand.transform.position = new Vector3(currX, currY, currZ);
            
            
        }
        
        if (turnOn)
        {
         //print("5");
         
            if(timer > optoRefreshRate)
                
                {

            timer = timer - optoRefreshRate;
            }
            
            
           
            
        }
        
        

    }
    
    public string generateCoord(string s){
       // string roundedCoord = currX.ToString();
       string roundedCoord = "0.00";
       string[] coordString;
       // if(s == coords[1]){
       //     roundedCoord = currY.ToString();
      //  }
        
       // if(s == coords[2]){
       //     roundedCoord = currZ.ToString();
       // }
        
        for(int i = 0; i < s.Length; i++){
            if(s[i] == '.'){
                roundedCoord = s.Substring(0, 6);
                return roundedCoord;
            }
        }
        
        //coordString  = s.Split(' ');
        //return coordString[0] + '.' + coordString[1].Substring(0,2);
        return roundedCoord;
    }

    void setSphereCol(GameObject sphere, Color col)
    {
        //Get the renderer
        var sphereRenderer = sphere.GetComponent<Renderer>();
        //Set the color of the sphere
        sphereRenderer.material.SetColor("_Color", col);
    }
    
    static void runCommand()
{
    //* Create your Process
    print("1");
    process = new Process();
    process.StartInfo.FileName = "/media/lab3dipa/hdd1/Documents/cncsvision/build/room017A_optotrak_VR";
    process.StartInfo.Arguments = "/c DIR";
    process.StartInfo.UseShellExecute = false;
    process.StartInfo.RedirectStandardOutput = true;
    process.StartInfo.RedirectStandardError = true;
    process.StartInfo.RedirectStandardInput = true;
    //* Set ONLY ONE handler here.
    process.ErrorDataReceived += new DataReceivedEventHandler(OutputHandler);
    //* Start process
    print("2");
    process.Start();
    print("3");
    //process.PriorityClass = System.Diagnostics.ProcessPriorityClass.Normal;
    //* Wait for program to receive to input
    //process.WaitForInputIdle();
    print("4");
    //System.Threading.Thread.Sleep(10000);
    //* Read one element asynchronously
    process.BeginErrorReadLine();


        //* Read the other one synchronously
    
    //string output = process.StandardOutput.ReadToEnd();
    /*for (int i = 1; i < 5; i++){
        if(output == "ready"){
            process.StandardInput.WriteLine(i.ToString()); 
            process.StandardInput.WriteLine(" "); 
            print(output);
        // print("it works");
        }
        
    }*/
    

    //process.StandardInput.WriteLine("0"); 
    //process.StandardInput.WriteLine(" "); 
    //System.Threading.Thread.Sleep(1000);
    //process.Kill();
    //process.WaitForExit();
}

static void OutputHandler(object sendingProcess, DataReceivedEventArgs outLine)
{
    //* Do your stuff with the output (write to console/log/StringBuilder)
    print(outLine.Data);
}


}
